<UserControl x:Class="TachiShop.MultiSelectComboBox"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:TachiShop"
             xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <ControlTemplate x:Key="MultiSelectComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot"
              Background="{TemplateBinding Background}"
              SnapsToDevicePixels="True">
                <AdornerDecorator>
                    <Grid x:Name="InnerRoot"
                    materialDesign:BottomDashedLineAdorner.IsAttached="{Binding IsEnabled, RelativeSource={RelativeSource Self}, Converter={StaticResource NotConverter}}"
                    materialDesign:BottomDashedLineAdorner.Brush="{TemplateBinding BorderBrush}"
                    materialDesign:BottomDashedLineAdorner.Thickness="{TemplateBinding BorderThickness}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="0" MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" />
                        </Grid.ColumnDefinitions>
                        <ToggleButton x:Name="toggleButton"
                                Grid.ColumnSpan="2"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                Style="{StaticResource MaterialDesignComboBoxToggleButton}"/>
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              UseLayoutRounding="{TemplateBinding UseLayoutRounding}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock
                                Grid.Column="0"
                                FontSize="{TemplateBinding FontSize}"
                                Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Grid x:Name="InputRoot" Grid.Column="1"
                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <ContentPresenter x:Name="contentPresenter"
                                            Content="{Binding Path=Text, RelativeSource={RelativeSource TemplatedParent}}"
                                            ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                            ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                            ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                            IsHitTestVisible="False"/>
                                <TextBox x:Name="PART_EditableTextBox"
                                   IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                   HorizontalAlignment="Stretch"
                                   HorizontalContentAlignment="Stretch"
                                   Style="{StaticResource MaterialDesignComboBoxEditableTextBox}"
                                   CaretBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                   Visibility="Collapsed" />

                                <materialDesign:SmartHint x:Name="Hint"
                                         HintProxy="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static materialDesign:HintProxyFabricConverter.Instance}}"
                                         FontSize="{TemplateBinding FontSize}"
                                         SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                         UseLayoutRounding="{TemplateBinding UseLayoutRounding}"
                                         UseFloating="{Binding Path=(materialDesign:HintAssist.IsFloating), RelativeSource={RelativeSource TemplatedParent}}"
                                         FloatingScale="{Binding Path=(materialDesign:HintAssist.FloatingScale), RelativeSource={RelativeSource TemplatedParent}}"
                                         FloatingOffset="{Binding Path=(materialDesign:HintAssist.FloatingOffset), RelativeSource={RelativeSource TemplatedParent}}"
                                         HintOpacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                         Hint="{TemplateBinding materialDesign:HintAssist.Hint}" />
                            </Grid>
                            <StackPanel Orientation="Horizontal" Grid.Column="2" VerticalAlignment="Top">
                                <TextBlock
                              FontSize="{TemplateBinding FontSize}"
                              Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                              Text="{Binding Path=(materialDesign:TextFieldAssist.SuffixText), RelativeSource={RelativeSource TemplatedParent}}"
                              />
                                <Button x:Name="PART_ClearButton" Height="Auto" Padding="2,0,-6,0" Style="{DynamicResource MaterialDesignToolButton}" Focusable="False">
                                    <Button.Visibility>
                                        <MultiBinding Converter="{StaticResource ClearTextConverter}">
                                            <Binding ElementName="Hint" Path="IsContentNullOrEmpty" Converter="{StaticResource NotConverter}"/>
                                            <Binding Path="(materialDesign:TextFieldAssist.HasClearButton)" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        </MultiBinding>
                                    </Button.Visibility>
                                    <materialDesign:PackIcon Margin="0" Kind="CloseCircle" />
                                </Button>
                            </StackPanel>
                        </Grid>
                        <materialDesign:Underline x:Name="Underline"
                                 Grid.ColumnSpan="2"
                                 materialDesign:TextFieldAssist.UnderlineBrush="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}"
                                 IsActive="{Binding ElementName=PART_EditableTextBox, Path=IsKeyboardFocused}"
                                 Visibility="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                                 Background="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource TemplatedParent}}" />
                        <Canvas Grid.Column="0" VerticalAlignment="Bottom">
                            <TextBlock Canvas.Top="2" FontSize="10" MaxWidth="{Binding ActualWidth, ElementName=toggleButton}"
                                 Opacity="{Binding Path=(materialDesign:HintAssist.HintOpacity), RelativeSource={RelativeSource TemplatedParent}}"
                                 Text="{Binding Path=(materialDesign:HintAssist.HelperText), RelativeSource={RelativeSource TemplatedParent}}" />
                        </Canvas>

                        <materialDesign:ComboBoxPopup x:Name="PART_Popup"
                                     Grid.Column="0"
                                     AllowsTransparency="True"
                                     Focusable="False"
                                     HorizontalOffset="-11.5"
                                     IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                     PlacementTarget="{Binding ElementName=templateRoot}"
                                     SnapsToDevicePixels="True"
                                     UseLayoutRounding="True"
                                     Placement="Custom"
                                     PopupAnimation="Fade"
                                     VerticalOffset="0"
                                     DefaultVerticalOffset="5"
                                     DownVerticalOffset="-15.5"
                                     UpVerticalOffset="15"
                                     CornerRadius="2"
                                     ContentMargin="6"
                                     ContentMinWidth="{Binding ElementName=templateRoot, Path=ActualWidth, Converter={StaticResource MathAddConverter}, ConverterParameter=32}"
                                     materialDesign:ColorZoneAssist.Mode="{Binding Path=(materialDesign:ColorZoneAssist.Mode), RelativeSource={RelativeSource TemplatedParent}}"
                                     Tag="{DynamicResource MaterialDesignPaper}"
                                     ClassicMode="{Binding Path=(materialDesign:ComboBoxAssist.ClassicMode), RelativeSource={RelativeSource TemplatedParent}}"
                                     UpContentTemplate="{StaticResource PopupContentUpTemplate}"
                                     DownContentTemplate="{StaticResource PopupContentDownTemplate}"
                                     ClassicContentTemplate="{StaticResource PopupContentClassicTemplate}">
                            <materialDesign:ComboBoxPopup.Background>
                                <MultiBinding Converter="{StaticResource FallbackBrushConverter}">
                                    <Binding Path="Background" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="Tag" ElementName="PART_Popup" />
                                </MultiBinding>
                            </materialDesign:ComboBoxPopup.Background>
                            <ContentControl>
                                <ScrollViewer MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                        MinHeight="1"
                                        Background="{Binding Background, ElementName=PART_Popup}">
                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </ContentControl>
                        </materialDesign:ComboBoxPopup>
                    </Grid>
                </AdornerDecorator>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger SourceName="PART_Popup" Property="PopupPlacement" Value="Classic">
                    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                </Trigger>
                <Trigger SourceName="PART_Popup" Property="IsOpen" Value="True">
                    <Setter Property="Background" TargetName="templateRoot" Value="{Binding Background, ElementName=PART_Popup}" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="templateRoot" Property="Opacity" Value="0.56"/>
                    <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                </Trigger>
                <Trigger Property="IsEditable" Value="True">
                    <Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
                    <Setter TargetName="Underline" Property="Visibility" Value="{Binding Path=(materialDesign:TextFieldAssist.DecorationVisibility), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="contentPresenter" Property="Visibility" Value="Collapsed" />
                </Trigger>
                <Trigger Property="materialDesign:HintAssist.IsFloating" Value="True">
                    <Setter TargetName="InnerRoot" Property="Margin" Value="0 11.5 0 0" />
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsEditable" Value="False"/>
                        <Condition Property="IsDropDownOpen" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Underline" Property="Visibility" Value="Hidden"/>
                    <Setter TargetName="toggleButton" Property="BorderBrush" Value="Transparent"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                        <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                        <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="materialDesign:HintAssist.IsFloating" Value="True" />
                        <Condition SourceName="Hint" Property="IsHintInFloatingPosition" Value="True" />
                        <Condition Property="IsKeyboardFocusWithin" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                        <Condition SourceName="PART_EditableTextBox" Property="IsKeyboardFocused" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="Hint" Property="IsContentNullOrEmpty" Value="False" />
                        <Condition Property="IsDropDownOpen" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="Hint" Property="Foreground" Value="{Binding Path=(materialDesign:HintAssist.Foreground), RelativeSource={RelativeSource TemplatedParent}}" />
                    <Setter TargetName="Hint" Property="HintOpacity" Value="1" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True" />
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
                </MultiTrigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter TargetName="Underline" Property="IsActive" Value="True"/>
                </Trigger>
                <Trigger Property="Validation.HasError" Value="True">
                    <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                    <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                        <Condition Property="Validation.HasError" Value="True" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{DynamicResource ValidationErrorBrush}"/>
                    <Setter TargetName="Underline" Property="Background" Value="{DynamicResource ValidationErrorBrush}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsMouseOver" Value="True" />
                        <Condition Property="Validation.HasError" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                    <Setter TargetName="Underline" Property="Background" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Standard"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignPaper}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignBody}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Inverted"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignBody}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignPaper}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryLight" />
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueLightBrush}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueLightForegroundBrush}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryMid"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueMidBrush}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="PrimaryDark"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource PrimaryHueDarkBrush}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource PrimaryHueDarkForegroundBrush}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Accent"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource SecondaryAccentBrush}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource SecondaryAccentForegroundBrush}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Light"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignLightBackground}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignLightForeground}" />
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="PART_Popup" Property="IsOpen" Value="True"/>
                        <Condition SourceName="PART_Popup" Property="materialDesign:ColorZoneAssist.Mode" Value="Dark"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="PART_Popup" Property="Tag" Value="{DynamicResource MaterialDesignDarkBackground}" />
                    <Setter TargetName="PART_Popup" Property="Background"
                        Value="{Binding Tag, RelativeSource={RelativeSource Self}, Converter={StaticResource RemoveAlphaBrushConverter}}" />
                    <Setter Property="TextElement.Foreground" Value="{DynamicResource MaterialDesignDarkForeground}" />
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
        <Style x:Key="MultiSelectComboBox" TargetType="{x:Type ComboBox}">
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"/>
            <Setter Property="BorderThickness" Value="0 0 0 1"/>
            <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
            <Setter Property="Padding" Value="0 6 0 6" />
            <Setter Property="VerticalContentAlignment" Value="Top" />
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
            <Setter Property="ScrollViewer.PanningMode" Value="Both" />
            <Setter Property="Stylus.IsFlicksEnabled" Value="False" />
            <Setter Property="Validation.ErrorTemplate" Value="{StaticResource MaterialDesignValidationErrorTemplate}"/>
            <Setter Property="materialDesign:TextFieldAssist.TextBoxViewMargin" Value="1 0 1 0" />
            <Setter Property="materialDesign:TextFieldAssist.UnderlineBrush" Value="{DynamicResource PrimaryHueMidBrush}" />
            <Setter Property="materialDesign:ColorZoneAssist.Mode" Value="Standard" />
            <Setter Property="materialDesign:HintAssist.Foreground" Value="{DynamicResource PrimaryHueMidBrush}" />
            <Setter Property="Template" Value="{StaticResource MultiSelectComboBoxTemplate}" />
            <Style.Triggers>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="BorderBrush" Value="{Binding Path=(materialDesign:TextFieldAssist.UnderlineBrush), RelativeSource={RelativeSource Self}}" />
                </Trigger>
                <Trigger Property="IsEditable" Value="True">
                    <Setter Property="IsTabStop" Value="False" />
                    <!-- designer prefers hard bool -->
                    <Setter Property="materialDesign:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource TrueValue}" />
                </Trigger>
                <!-- designer prefers hard bool -->
                <Trigger Property="materialDesign:ComboBoxAssist.ShowSelectedItem" Value="{StaticResource TrueValue}" >
                    <Setter Property="ItemContainerStyle" Value="{StaticResource MaterialDesignComboBoxItemStyle}" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>
    <ComboBox
        x:Name="MultiSelectCombo"
        Style="{StaticResource MultiSelectComboBox}"
        materialDesign:HintAssist.IsFloating="{Binding Path=(materialDesign:HintAssist.IsFloating),
        RelativeSource={RelativeSource AncestorType=UserControl}}"
        PreviewKeyDown="MultiSelectCombo_OnPreviewKeyDown"
        SelectionChanged="MultiSelectCombo_SelectionChanged"
        Text="{Binding Path=Text,RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}}">
        <ComboBox.ItemTemplate>
            <DataTemplate>
                <CheckBox Content="{Binding Title}"
                          IsChecked="{Binding Path=IsSelected, Mode=TwoWay}"
                          Click="CheckBox_Click" />
            </DataTemplate>
        </ComboBox.ItemTemplate>
    </ComboBox>
</UserControl>
